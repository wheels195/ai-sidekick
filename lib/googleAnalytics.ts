// Google Analytics Reporting API integration for admin dashboard\n// This allows us to pull website traffic data into our admin analytics\n\ninterface GAMetrics {\n  sessions: number\n  users: number\n  pageviews: number\n  bounceRate: number\n  avgSessionDuration: number\n  conversionRate: number\n}\n\ninterface GADateRange {\n  startDate: string\n  endDate: string\n}\n\n// Get website traffic data from Google Analytics\nexport async function getGoogleAnalyticsData(\n  dateRange: GADateRange,\n  adminApiKey: string\n): Promise<GAMetrics | null> {\n  try {\n    // This would integrate with Google Analytics Reporting API\n    // For now, return mock data structure\n    \n    // In production, you'd use:\n    // 1. Google Analytics Data API v1\n    // 2. Service account credentials\n    // 3. Property ID for ai-sidekick.io\n    \n    const mockData: GAMetrics = {\n      sessions: 0,\n      users: 0, \n      pageviews: 0,\n      bounceRate: 0,\n      avgSessionDuration: 0,\n      conversionRate: 0\n    }\n    \n    return mockData\n    \n  } catch (error) {\n    console.error('Google Analytics API error:', error)\n    return null\n  }\n}\n\n// Calculate conversion funnel from website to app usage\nexport function calculateConversionFunnel(\n  websiteVisitors: number,\n  signups: number,\n  activeUsers: number,\n  paidUsers: number\n) {\n  return {\n    visitorToSignup: websiteVisitors > 0 ? (signups / websiteVisitors) * 100 : 0,\n    signupToActive: signups > 0 ? (activeUsers / signups) * 100 : 0,\n    activeToPaid: activeUsers > 0 ? (paidUsers / activeUsers) * 100 : 0,\n    overallConversion: websiteVisitors > 0 ? (paidUsers / websiteVisitors) * 100 : 0\n  }\n}\n\n// Track key business events\nexport const businessEvents = {\n  SIGNUP_STARTED: 'signup_started',\n  SIGNUP_COMPLETED: 'signup_completed', \n  FIRST_CONVERSATION: 'first_conversation',\n  TRIAL_LIMIT_REACHED: 'trial_limit_reached',\n  UPGRADE_INITIATED: 'upgrade_initiated',\n  UPGRADE_COMPLETED: 'upgrade_completed',\n  FEATURE_USED: 'feature_used'\n} as const\n\n// Enhanced engagement score calculation\nexport function calculateEngagementScore(\n  user: {\n    created_at: string\n    last_activity_at?: string\n    tokens_used_trial: number\n    conversation_count: number\n    days_active: number\n  }\n): number {\n  const daysSinceSignup = Math.max(1, \n    Math.floor((Date.now() - new Date(user.created_at).getTime()) / (1000 * 60 * 60 * 24))\n  )\n  \n  const daysSinceActivity = user.last_activity_at \n    ? Math.floor((Date.now() - new Date(user.last_activity_at).getTime()) / (1000 * 60 * 60 * 24))\n    : 999\n    \n  // Scoring factors (0-100 scale)\n  const usageScore = Math.min(40, (user.tokens_used_trial / 250000) * 40) // 40% weight\n  const frequencyScore = Math.min(30, (user.conversation_count / daysSinceSignup) * 30) // 30% weight  \n  const recencyScore = Math.max(0, 30 - (daysSinceActivity * 2)) // 30% weight, decay over time\n  \n  return Math.round(usageScore + frequencyScore + recencyScore)\n}"